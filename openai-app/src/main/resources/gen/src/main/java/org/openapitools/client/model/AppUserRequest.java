/*
 * API des classes d'Admin App
 * Document des API l'application d'admininistration App
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AppUserRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-01-08T00:17:33.875833400Z[Africa/Dakar]")
public class AppUserRequest {
  public static final String SERIALIZED_NAME_PRENOM = "prenom";
  @SerializedName(SERIALIZED_NAME_PRENOM)
  private String prenom;

  public static final String SERIALIZED_NAME_NOM = "nom";
  @SerializedName(SERIALIZED_NAME_NOM)
  private String nom;

  public static final String SERIALIZED_NAME_APP_ROLE_IDS = "appRoleIds";
  @SerializedName(SERIALIZED_NAME_APP_ROLE_IDS)
  private List<Integer> appRoleIds = null;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_MOT_DE_PASSE = "motDePasse";
  @SerializedName(SERIALIZED_NAME_MOT_DE_PASSE)
  private String motDePasse;

  public static final String SERIALIZED_NAME_ETAT = "etat";
  @SerializedName(SERIALIZED_NAME_ETAT)
  private Integer etat;

  public AppUserRequest() {
  }

  public AppUserRequest prenom(String prenom) {
    
    this.prenom = prenom;
    return this;
  }

   /**
   * Get prenom
   * @return prenom
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getPrenom() {
    return prenom;
  }


  public void setPrenom(String prenom) {
    this.prenom = prenom;
  }


  public AppUserRequest nom(String nom) {
    
    this.nom = nom;
    return this;
  }

   /**
   * Get nom
   * @return nom
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getNom() {
    return nom;
  }


  public void setNom(String nom) {
    this.nom = nom;
  }


  public AppUserRequest appRoleIds(List<Integer> appRoleIds) {
    
    this.appRoleIds = appRoleIds;
    return this;
  }

  public AppUserRequest addAppRoleIdsItem(Integer appRoleIdsItem) {
    if (this.appRoleIds == null) {
      this.appRoleIds = new ArrayList<>();
    }
    this.appRoleIds.add(appRoleIdsItem);
    return this;
  }

   /**
   * Get appRoleIds
   * @return appRoleIds
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<Integer> getAppRoleIds() {
    return appRoleIds;
  }


  public void setAppRoleIds(List<Integer> appRoleIds) {
    this.appRoleIds = appRoleIds;
  }


  public AppUserRequest email(String email) {
    
    this.email = email;
    return this;
  }

   /**
   * Get email
   * @return email
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getEmail() {
    return email;
  }


  public void setEmail(String email) {
    this.email = email;
  }


  public AppUserRequest motDePasse(String motDePasse) {
    
    this.motDePasse = motDePasse;
    return this;
  }

   /**
   * Get motDePasse
   * @return motDePasse
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getMotDePasse() {
    return motDePasse;
  }


  public void setMotDePasse(String motDePasse) {
    this.motDePasse = motDePasse;
  }


  public AppUserRequest etat(Integer etat) {
    
    this.etat = etat;
    return this;
  }

   /**
   * Get etat
   * @return etat
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getEtat() {
    return etat;
  }


  public void setEtat(Integer etat) {
    this.etat = etat;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AppUserRequest appUserRequest = (AppUserRequest) o;
    return Objects.equals(this.prenom, appUserRequest.prenom) &&
        Objects.equals(this.nom, appUserRequest.nom) &&
        Objects.equals(this.appRoleIds, appUserRequest.appRoleIds) &&
        Objects.equals(this.email, appUserRequest.email) &&
        Objects.equals(this.motDePasse, appUserRequest.motDePasse) &&
        Objects.equals(this.etat, appUserRequest.etat);
  }

  @Override
  public int hashCode() {
    return Objects.hash(prenom, nom, appRoleIds, email, motDePasse, etat);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AppUserRequest {\n");
    sb.append("    prenom: ").append(toIndentedString(prenom)).append("\n");
    sb.append("    nom: ").append(toIndentedString(nom)).append("\n");
    sb.append("    appRoleIds: ").append(toIndentedString(appRoleIds)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    motDePasse: ").append(toIndentedString(motDePasse)).append("\n");
    sb.append("    etat: ").append(toIndentedString(etat)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("prenom");
    openapiFields.add("nom");
    openapiFields.add("appRoleIds");
    openapiFields.add("email");
    openapiFields.add("motDePasse");
    openapiFields.add("etat");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to AppUserRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (AppUserRequest.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in AppUserRequest is not found in the empty JSON string", AppUserRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!AppUserRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AppUserRequest` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("prenom") != null && !jsonObj.get("prenom").isJsonNull()) && !jsonObj.get("prenom").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `prenom` to be a primitive type in the JSON string but got `%s`", jsonObj.get("prenom").toString()));
      }
      if ((jsonObj.get("nom") != null && !jsonObj.get("nom").isJsonNull()) && !jsonObj.get("nom").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nom` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nom").toString()));
      }
      // ensure the json data is an array
      if ((jsonObj.get("appRoleIds") != null && !jsonObj.get("appRoleIds").isJsonNull()) && !jsonObj.get("appRoleIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `appRoleIds` to be an array in the JSON string but got `%s`", jsonObj.get("appRoleIds").toString()));
      }
      if ((jsonObj.get("email") != null && !jsonObj.get("email").isJsonNull()) && !jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if ((jsonObj.get("motDePasse") != null && !jsonObj.get("motDePasse").isJsonNull()) && !jsonObj.get("motDePasse").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `motDePasse` to be a primitive type in the JSON string but got `%s`", jsonObj.get("motDePasse").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AppUserRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AppUserRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AppUserRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AppUserRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<AppUserRequest>() {
           @Override
           public void write(JsonWriter out, AppUserRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AppUserRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AppUserRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AppUserRequest
  * @throws IOException if the JSON string is invalid with respect to AppUserRequest
  */
  public static AppUserRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AppUserRequest.class);
  }

 /**
  * Convert an instance of AppUserRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

